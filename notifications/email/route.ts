
import { NextRequest, NextResponse } from 'next/server'
import { Resend } from 'resend'
import nodemailer from 'nodemailer'

// Initialize Resend with API key (needs to be set in production)
const resend = new Resend(process.env.RESEND_API_KEY || 'demo-key')

// Gmail SMTP transporter as fallback
const createGmailTransporter = () => {
  if (!process.env.GMAIL_USER || !process.env.GMAIL_APP_PASSWORD) {
    return null
  }

  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.GMAIL_USER,
      pass: process.env.GMAIL_APP_PASSWORD,
    },
  })
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { type, data } = body

    if (type === 'booking') {
      return await handleBookingNotification(data)
    }

    return NextResponse.json({ error: 'Invalid notification type' }, { status: 400 })
  } catch (error) {
    console.error('Email notification error:', error)
    return NextResponse.json({ error: 'Failed to send notification' }, { status: 500 })
  }
}

async function handleBookingNotification(bookingData: any) {
  const { booking, lead } = bookingData

  // Email content for booking notification
  const emailSubject = `New Consultation Booking - ${lead.firstName} ${lead.lastName}`
  
  const emailHtml = `
    <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
      <div style="background-color: #1e40af; color: white; padding: 20px; text-align: center;">
        <h1 style="margin: 0; font-size: 24px;">New Consultation Booking</h1>
        <p style="margin: 10px 0 0 0;">True North Kitchen & Bath</p>
      </div>
      
      <div style="padding: 30px; background-color: #f9fafb;">
        <h2 style="color: #1e40af; margin-top: 0;">Customer Information</h2>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
          <tr>
            <td style="padding: 8px 0; font-weight: bold; width: 150px;">Name:</td>
            <td style="padding: 8px 0;">${lead.firstName} ${lead.lastName}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Email:</td>
            <td style="padding: 8px 0;">${lead.email}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Phone:</td>
            <td style="padding: 8px 0;">${lead.cellPhone}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Address:</td>
            <td style="padding: 8px 0;">${lead.address}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Own/Rent:</td>
            <td style="padding: 8px 0;">${lead.ownOrRent}</td>
          </tr>
        </table>

        <h2 style="color: #1e40af;">Appointment Details</h2>
        <table style="width: 100%; border-collapse: collapse; margin-bottom: 20px;">
          <tr>
            <td style="padding: 8px 0; font-weight: bold; width: 150px;">Date:</td>
            <td style="padding: 8px 0;">${new Date(booking.appointmentDate).toLocaleDateString('en-US', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}</td>
          </tr>
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Time:</td>
            <td style="padding: 8px 0;">${booking.appointmentTime}</td>
          </tr>
          ${booking.notes ? `
          <tr>
            <td style="padding: 8px 0; font-weight: bold;">Notes:</td>
            <td style="padding: 8px 0;">${booking.notes}</td>
          </tr>
          ` : ''}
        </table>

        ${lead.renovateElsewhere && lead.renovateElsewhereDetails ? `
        <h2 style="color: #1e40af;">Additional Information</h2>
        <p><strong>Other renovation areas:</strong> ${lead.renovateElsewhereDetails}</p>
        ` : ''}

        <div style="background-color: #dbeafe; padding: 15px; border-radius: 8px; margin-top: 20px;">
          <h3 style="color: #1e40af; margin-top: 0;">Lead Qualification Status</h3>
          <ul style="color: #1f2937; margin: 0; padding-left: 20px;">
            <li>Available for consultation: ${lead.availableForConsult ? '‚úÖ Yes' : '‚ùå No'}</li>
            <li>Decision makers available: ${lead.decisionMakersAvail ? '‚úÖ Yes' : '‚ùå No'}</li>
            <li>Lead status: ${lead.status.toUpperCase()}</li>
          </ul>
        </div>
      </div>
      
      <div style="background-color: #374151; color: white; padding: 20px; text-align: center;">
        <p style="margin: 0; font-size: 14px;">
          Booking ID: ${booking.id} | Lead ID: ${lead.id}
        </p>
        <p style="margin: 10px 0 0 0; font-size: 12px;">
          Generated by True North Kitchen & Bath CRM
        </p>
      </div>
    </div>
  `

  const emailText = `
New Consultation Booking - ${lead.firstName} ${lead.lastName}

Customer Information:
- Name: ${lead.firstName} ${lead.lastName}
- Email: ${lead.email}
- Phone: ${lead.cellPhone}
- Address: ${lead.address}
- Own/Rent: ${lead.ownOrRent}

Appointment Details:
- Date: ${new Date(booking.appointmentDate).toLocaleDateString()}
- Time: ${booking.appointmentTime}
${booking.notes ? `- Notes: ${booking.notes}` : ''}

${lead.renovateElsewhere && lead.renovateElsewhereDetails ? `
Additional Information:
- Other renovation areas: ${lead.renovateElsewhereDetails}
` : ''}

Lead Qualification:
- Available for consultation: ${lead.availableForConsult ? 'Yes' : 'No'}
- Decision makers available: ${lead.decisionMakersAvail ? 'Yes' : 'No'}
- Lead status: ${lead.status.toUpperCase()}

Booking ID: ${booking.id}
Lead ID: ${lead.id}
  `

  // Recipients - Both Rob and Tammy should receive notifications
  const recipients = [
    'rradosta1@gmail.com', // Rob's personal Gmail (works with Resend test mode)
    'talaliey@truenorthkb.com' // Tammy's email - now included for notifications
  ]

  // Try Gmail SMTP first (since Resend is in test mode), then fall back to Resend
  const gmailTransporter = createGmailTransporter()
  if (gmailTransporter) {
    try {
      console.log('üîÑ Attempting to send emails via Gmail SMTP...')
      
      const emailPromises = recipients.map(recipient => 
        gmailTransporter.sendMail({
          from: `"True North Kitchen & Bath" <${process.env.GMAIL_USER}>`,
          to: recipient,
          subject: emailSubject,
          html: emailHtml,
          text: emailText,
        })
      )

      const results = await Promise.all(emailPromises)
      console.log('‚úÖ Emails sent successfully via Gmail SMTP')
      console.log('üìß Gmail SMTP Response Details:')
      results.forEach((result, index) => {
        console.log(`  Email ${index + 1} to ${recipients[index]}:`)
        console.log(`    Message ID: ${result.messageId}`)
        console.log(`    Response: ${result.response}`)
      })
      
      return NextResponse.json({ 
        success: true, 
        message: 'Booking notifications sent successfully via Gmail SMTP',
        service: 'gmail',
        messageIds: results.map((r: any) => r.messageId),
        recipients 
      })
    } catch (gmailError) {
      console.error('‚ùå Gmail SMTP failed, trying Resend fallback:', gmailError)
    }
  }

  // Try Resend as fallback if Gmail fails or is not configured
  if (process.env.RESEND_API_KEY && process.env.RESEND_API_KEY !== 'demo-key') {
    try {
      console.log('üîÑ Attempting to send emails via Resend...')
      const emailPromises = recipients.map(recipient => 
        resend.emails.send({
          from: 'True North Kitchen & Bath <onboarding@resend.dev>',
          to: recipient,
          subject: emailSubject,
          html: emailHtml,
          text: emailText,
        })
      )

      const results = await Promise.all(emailPromises)
      
      // Check if all emails were successful
      const successfulEmails = results.filter((r: any) => r.data?.id).length
      const failedEmails = results.filter((r: any) => r.error).length
      
      console.log('üìß Resend API Response Details:')
      console.log(`‚úÖ Successfully sent: ${successfulEmails}/${recipients.length} emails`)
      if (failedEmails > 0) {
        console.log(`‚ùå Failed to send: ${failedEmails}/${recipients.length} emails`)
      }
      
      results.forEach((result: any, index: number) => {
        const recipient = recipients[index]
        console.log(`  üìß Email ${index + 1} to ${recipient}:`)
        if (result.data?.id) {
          console.log(`    ‚úÖ SUCCESS - Email ID: ${result.data.id}`)
        } else if (result.error) {
          const errorObj = result.error as any
          console.log(`    ‚ùå FAILED - Error: ${errorObj?.error || JSON.stringify(result.error)}`)
          if (errorObj?.statusCode === 403 && errorObj?.error?.includes('testing emails')) {
            console.log(`    ‚ÑπÔ∏è  NOTE: This is due to Resend test mode restrictions. In production with domain verification, this email would be delivered.`)
          }
        }
      })
      
      // Determine success status
      const hasAnySuccess = successfulEmails > 0
      const message = failedEmails === 0 
        ? 'All booking notifications sent successfully via Resend'
        : `Booking notifications partially sent via Resend (${successfulEmails}/${recipients.length} successful)`
      
      return NextResponse.json({ 
        success: hasAnySuccess, // True if at least one email was sent
        message,
        service: 'resend',
        emailIds: results.map((r: any) => r.data?.id),
        recipients,
        successfulCount: successfulEmails,
        failedCount: failedEmails,
        details: results.map((r: any, i: number) => ({
          recipient: recipients[i],
          emailId: r.data?.id,
          error: r.error,
          success: !!r.data?.id
        }))
      })
    } catch (resendError) {
      console.error('‚ùå Resend failed, trying Gmail SMTP fallback:', resendError)
    }
  }



  // If both services fail or are not configured, log and return error
  console.log('üìß EMAIL NOTIFICATION (Demo Mode - No email service configured):')
  console.log('To:', recipients.join(', '))
  console.log('Subject:', emailSubject)
  console.log('Content preview:', emailText.substring(0, 200) + '...')
  
  return NextResponse.json({ 
    success: false, 
    message: 'No email service configured. Please set up either RESEND_API_KEY or Gmail SMTP (GMAIL_USER + GMAIL_APP_PASSWORD)',
    recipients,
    emailPreview: {
      subject: emailSubject,
      contentPreview: emailText.substring(0, 200) + '...'
    }
  }, { status: 500 })
}
